import streamlit as st

abas = st.tabs(["üß© Metodologia", "üõ†Ô∏è Pipeline", "üñ•Ô∏è C√≥digo Utilizado"])

with abas[0]:  # Primeira aba
    st.header("üß© Metodologia")

    st.markdown(
        """<hr style="border: 3px solid #007BFF;">""",
        unsafe_allow_html=True
    )
  
    st.header("Modelo MLP (Multilayer Perceptron)", divider="gray")

    st.write("""
    Para o desafio, foi proposto um modelo de Deep Learning do tipo **MLP** (Multilayer Perceptron), que √© uma rede neural artificial supervisionada composta por m√∫ltiplas camadas de neur√¥nios: 
    uma camada de entrada, uma ou mais camadas ocultas e uma camada de sa√≠da. Cada neur√¥nio de uma camada est√° conectado a todos os neur√¥nios da pr√≥xima camada.
    """)

    image_url_1 = "https://raw.githubusercontent.com/florascarvalho/Datathon_Data_Analytics-Fase5/main/streamlit/imagens/Modelo%20MLP.jpg"
    st.image(image_url_1, caption="Modelo Esquem√°tico de uma rede MLP")  

    st.write("""
    Em nosso modelo, o MLP foi criado utilizando a biblioteca Keras, na qual cada neur√¥nio combina dados de entrada com pesos diferentes, aplica uma fun√ß√£o ReLU para
    transmitir o sinal para os pr√≥ximos neur√¥nios. Pode ser visualizado no trecho abaixo:
    """)

    image_url_2 = "https://raw.githubusercontent.com/florascarvalho/Datathon_Data_Analytics-Fase5/main/streamlit/imagens/Script%20MLP_Keras.jpg"
    st.image(image_url_2, caption="Script MLP com Keras") 

    st.write("""
    Para o treinamento, foi utilizado 20%% dos dados da base. No processo √© utilizada a t√©cnica de retropropaga√ß√£o, ajustando assim os pesos com base no erro da previs√£o.       
    """)

    st.header("Vantagens e desvantagens", divider="gray")
    st.write("""
    Dentre as vantagens desse modelo, se destaca a ampla utiliza√ß√£o para aprender padr√µes complexos, al√©m de ser aplic√°vel para casos n√£o lineares.
    Por√©m, dependendo da base, pode exigir muito processamento e se tornar lento, al√©m de ter o risco de aprender ru√≠dos e exce√ß√µes da base de dados.
    """)

with abas[1]:  # Segunda aba
    st.header("üõ†Ô∏è Pipeline")

    st.markdown(
        """<hr style="border: 3px solid #007BFF;">""",
        unsafe_allow_html=True
    )

    st.header("Pipeline do Projeto", divider="gray")
    st.write("""
    Para desenvolver o modelo proposto de forma mais organizada e clara, foi montado um pipeline. Abaixo, segue o racional utilizado:
    """)

    st.markdown(""" 
    üõ†Ô∏è Pipeline de Processamento e Treinamento  
    1. Instala√ß√£o das bibliotecas necess√°rias para o processamento dos dados;  
    2. Leitura das bases de dados e unifica√ß√£o das mesmas, para maior efici√™ncia no processamento;  
    3. Pr√©-processamento textual, no qual os campos ‚Äúexperiencias‚Äù, ‚Äúendereco‚Äù, ‚Äúcertificacoes‚Äù, ‚Äúcursos‚Äù s√£o concatenados. Em caso do retorno for vazio, √© utilizado o conte√∫do da coluna "cv_pt" como fallback;  
    4. Label Encoding dos campos de idiomas e n√≠veis de escolaridade, onde cada resposta ter√° um valor num√©rico atribu√≠do √† ela, possibilitando a utiliza√ß√£o no modelo de MLP;  
    5. Tokenizar o texto concatenado, dividindo-os em palavras para auxiliar na vetoriza√ß√£o dos mesmos com FastText;  
    6. Concatena√ß√£o das vari√°veis, para compor uma √∫nica vari√°vel "X";  
    7. Divis√£o de treino e teste;  
    8. Treinamento da rede neural MLP;  
    9. Avalia√ß√£o do modelo, incluindo a previs√£o de acur√°cia e perda;  
    10. Cria√ß√£o da fun√ß√£o "prever candidato", recebendo os dados e calculando se um candidato deve ser chamado ou n√£o para a entrevista, com os poss√≠veis retornos de respostas:  
        - ‚ùå Reprovado  
        - üü° Chamar para entrevista ‚Äî ader√™ncia m√≠nima  
        - ‚úÖ Chamar para entrevista ‚Äî alta ader√™ncia  
    """)

with abas[2]:  # Terceira aba
    st.header("üñ•Ô∏è C√≥digo Utilizado")

    st.markdown(
        """<hr style="border: 3px solid #007BFF;">""",
        unsafe_allow_html=True
    )

    st.header("Notebook Utilizado em PDF", divider="gray")

    pdf_path = "streamlit/PDF - Ferramenta Recrutamento_Datathon.pdf"

    try:
        with open(pdf_path, "rb") as file:
            pdf_bytes = file.read()
            st.download_button("üì• Baixar o PDF", pdf_bytes, "notebook.pdf", "application/pdf")

        # ‚ö†Ô∏è Observa√ß√£o: iframe com caminho local pode n√£o funcionar na web ‚Äî recomend√°vel usar embed externo
        st.components.v1.iframe(f"file:///{pdf_path}", width=700, height=500)

    except FileNotFoundError:
        st.error("Arquivo PDF n√£o encontrado. Verifique o caminho e o nome do arquivo.")

# Rodap√© no sidebar
st.sidebar.success("üéì Aluna: Flora Serafim de Carvalho | RM: RM354000")

